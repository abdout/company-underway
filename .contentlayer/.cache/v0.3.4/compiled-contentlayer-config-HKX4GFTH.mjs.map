{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  makeSource,\r\n  ComputedFields,\r\n} from 'contentlayer/source-files';\r\nimport { toUrlPath } from './src/lib/utils';\r\n\r\nconst computedFields: ComputedFields = {\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n  },\r\n  url: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      // Create URL from the raw path\r\n      const docPath = doc._raw.flattenedPath;\r\n      return `/docs/${docPath}`;\r\n    },\r\n  },\r\n  // Extract category, subCategory, and activity from the path\r\n  category: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts[0] || '';\r\n    },\r\n  },\r\n  subCategory: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts.length > 1 ? parts[1] : '';\r\n    },\r\n  },\r\n  activityName: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts.length > 2 ? parts[2] : '';\r\n    },\r\n  },\r\n};\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: 'Doc',\r\n  filePathPattern: 'docs/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Doc],\r\n}); "],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,OAEK;AAGP,IAAM,iBAAiC;AAAA,EACrC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAEhB,YAAM,UAAU,IAAI,KAAK;AACzB,aAAO,SAAS,OAAO;AAAA,IACzB;AAAA,EACF;AAAA;AAAA,EAEA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG;AAC9C,aAAO,MAAM,CAAC,KAAK;AAAA,IACrB;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG;AAC9C,aAAO,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI;AAAA,IACvC;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG;AAC9C,aAAO,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI;AAAA,IACvC;AAAA,EACF;AACF;AAEO,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AACrB,CAAC;",
  "names": []
}
